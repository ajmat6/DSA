1) getchar() is used to remove the new line character (\n) that remains in input buffer after you enter a number and presses enter -> as scanf do not read \n entered due to pressing of enter button.
2) stdlib() library is used for functions like malloc, calloc, exit, abs, remove etc. Here remove is used.
3) fgets(buffer, sizeof(buffer), file) != NULL -> when fgets encounter EOF or error it returns null
4) strcspn (String Complement Span) finds the first occurrence of \n in newUser.name.
5) if () are included in first
        // else if (expression[i] == '(') {
        //     push(&ops, expression[i]);
        // } 

        // else if (expression[i] == ')') {
        //     while (!isEmpty(&ops) && peek(&ops) != '(') {
        //         int val2 = pop(&values);
        //         int val1 = pop(&values);
        //         char op = pop(&ops);
        //         push(&values, applyOperation(val1, val2, op));
        //     }
        //     pop(&ops);
        // } 
6) // #include <stdio.h>
// #include <stdlib.h>
// #include <string.h>
// #define MAX_LEN 100


// int isOperator(char ch) {
//     if(ch == '+' || ch == '-' || ch == '*' || ch == '/') return 1;
//     return 0;
// }

// int isDigit(char ch)  {
//     if(ch >= '0' && ch <= '9') return 1;
//     return 0;
// }

// int findOperatorResult(int a, int b, char op) {
//     printf("find %d %d %c\n", a, b, op);
//     if(op == '*') return a * b;
//     else {
//         if(b == 0) {
//             printf("Error: Division by zero.\n");
//             exit(1);
//         }
//         else return a / b;
//     }
//     return 0;
// }

// int solve(char* exp) {
//     int num = 0;
//     char lastOp = '+';
//     int stack[MAX_LEN];
//     int opStack[MAX_LEN];
//     int top = -1;
//     int opTop = -1;
//     int isNegative = 0;

//     for (int i = 0; exp[i] != '\0'; i++) {
//         char currChar = exp[i];

//         // if space is there -> skip
//         if (currChar == ' ' && exp[i + 1] != '\0') continue; // second check for spaces at the end like "4 * 5__"



//         // if (currChar == '-' && (lastOp == '*' || lastOp == '/')) {
//         //     isNegative = 1;
//         //     continue;
//         // }



//         // if curr char is digit, form full number in continuity:
//         if (isDigit(currChar)) {
//             num = num * 10 + (currChar - '0');
//             if (isNegative) {
//                 num = -num;
//                 isNegative = 0;
//             }
//         }

//         // operator or end of the exp
//         if(isOperator(currChar) || exp[i + 1] == '\0') {
//             if (lastOp == '+' || lastOp == '-') {
//                 stack[++top] = (lastOp == '+') ? num : -num; // increase top of stack and -num of +num as according to prev operator
//                 printf("%d\n", stack[top]);
//             }
//             else if (lastOp == '*' || lastOp == '/') {
//                 if (top >= 0) {
//                     int res =  findOperatorResult(stack[top], num, lastOp);
//                     stack[top] = res;
//                     printf("%d\n", stack[top]);
//                     printf("%d", res);
//                 }
//             }

//             num = 0;
//             lastOp = currChar;
//         }

//         // invalid character:
//         else if (!isDigit(currChar) && !isOperator(currChar)) {
//             printf("Error: Invalid exp.\n");
//             exit(1);
//         }
//     }

//     // result formation:
//     int ans = 0;
//     for (int i = 0; i <= top; i++) {
//         ans += stack[i];
//     }

//     return ans;
// }

// int main() {
//     char exp[100];

//     printf("Enter exp\n");
//     fgets(exp, 100, stdin);
//     exp[strcspn(exp, "\n")] = '\0';

//     int result = solve(exp);
//     printf("Result is: %d\n", result);

//     return 0;
// }

// // handle the case of 2 + 4 * -4;

7) intializing a variable in struct in c like int top = -1 is not allowed
8) char c = 97; will take ascii character at 97 place
9) Function pointer:
        #include <stdio.h>
        int sum(int a, int b) {
        return a + b;
        }
        
        int main() {
        int (*funPtr)(int, int) = &sum; // applying & is optional
        int result = funPtr(2, 4);
        printf("The sum is %d %d", funPtr(5, 6), result);
        }
10) #pragma pack(1)  // Enable structure packing
11) int checkItemPresence(char* allItems[], char* currItemName, int totalUniqueTillNow) {
    for(int i=0; i<totalUniqueTillNow; i++) {
        // if(allItems[i] == currItemName) return i; // not working
        if(strcmp(allItems[i], currItemName) == 0) return i;
    }
    return -1;
}


#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    char sentence[100];
    fgets(sentence, sizeof(sentence), stdin);
    
    char allWords[100][100];
    char wordsCount[100];
    
    char currWord[100];
    int currWordIndex = 0;
    for(int i=0; i<=strlen(sentence); i++) {
        if(sentence[i] == ' ' || sentence[i] == '\0') {
            if(currWordIndex > 0) {
                currWord[currWordIndex] = '\0';
                
            }
        }
    }
    
    
    
    return 0;
}

12) int arr[5] = {1, 2, 3, 4, 5};
    int *ptr1 = arr + 1;
    int * ptr2 = arr + 4;
    printf("%d", (ptr2 - ptr1)); returns no of elements between them 4 - 1 = 3.

13) #include<stdio.h>
int main() {    
    int arr[4] = {1, 2, 3, 4};   
    printf("%d %d %d", *arr, **&arr, *&arr[0]); &arr contains address of whole array, so with one * start you got address of arr[0] and then one more for its value
    return 0;
}

14) #include<stdio.h>
int main() {    
    char arr[6] = "ajmatk"; // as no space remained for null terminator, it will print ajmatk$%@# like this untill null terminator is found
    printf("%s", arr);
}

15) #include<stdio.h>
int main() {    
    char arr[6] = "ajmat"; 
    printf("%d %d", (void*)arr, (void*)&arr[0]); // only arr will not give address in case char arrays as in int arrays. So to print addres typecast it into void*
}

16) #include<stdio.h>
int a = 20;
int main() {    
    int arr[2][2] = {1,2,3,4};   
    int i = 0;    
    int j = 1;    
    printf("%d %d %d\n", arr, *(arr + 1), (arr + 1)); // second %d and third %d gives same result
 

    return 0;
}