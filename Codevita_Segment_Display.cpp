#include<bits/stdc++.h>
using namespace std;

vector<string> findMat(int low, int high, vector<string>& matrix) {
    vector<string> ans;
    for(int i=0; i<9; i++) {
        string temp = "";
        for(int j=low; j<=high; j++)  {
            temp.push_back(matrix[i][j]);
        }
        ans.push_back(temp);
    }
    return ans;
}

bool allZeros(int& col, vector<string>& matrix) {
    for(int i=0; i<9; i++) {
        if(matrix[i][col] != '0') return false;
    }
    return true;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    map<vector<string>, char> mp;
    vector<vector<string>> patterns = { {"11111", "10001", "10001", "10001", "11111", "10001", "10001", "10001", "10001" },{ "11111", "10001", "10001", "10001", "11111", "10001", "10001", "10001", "11111" },  { "11111", "10000", "10000", "10000", "10000", "10000", "10000", "10000", "11111" }, { "11111", "10001", "10001", "10001", "10001", "10001", "10001", "10001", "11111" }, { "11111", "10000", "10000", "10000", "11111", "10000", "10000", "10000", "11111" }, { "11111", "10000", "10000", "10000", "11111", "10000", "10000", "10000", "10000" }, { "11111", "10000", "10000", "10000", "10111", "10001", "10001", "10001", "11111" }, { "10001", "10001", "10001", "10001", "11111", "10001", "10001", "10001", "10001" }, { "11111", "00100", "00100", "00100", "00100", "00100", "00100", "00100", "11111" }, { "11111", "00001", "00001", "00001", "10001", "10001", "10001", "10001", "11111" }, { "10001", "10010", "10100", "11000", "11111", "10001", "10001", "10001", "10001" }, { "10000", "10000", "10000", "10000", "10000", "10000", "10000", "10000", "11111" }, { "11111", "10101", "10101", "10101", "10101", "10001", "10001", "10001", "10001" }, { "10001", "11001", "10101", "10011", "10001", "10001", "10001", "10001", "10001" }, { "01110", "10001", "10001", "10001", "10001", "10001", "10001", "10001", "01110" }, { "11111", "10001", "10001", "10001", "11111", "10000", "10000", "10000", "10000" }, { "11111", "10001", "10001", "10001", "10101", "10001", "10011", "10001", "11111" }, { "11111", "10001", "10001", "10001", "11111", "11000", "10100", "10010", "10001" }, { "11111", "10000", "10000", "10000", "11111", "00001", "00001", "00001", "11111" }, { "11111", "00100", "00100", "00100", "00100", "00100", "00100", "00100", "00100" }, { "10001", "10001", "10001", "10001", "10001", "10001", "10001", "10001", "11111" }, { "10001", "10001", "10001", "10001", "10001", "10001", "10001", "01010", "00100" }, { "10001", "10001", "10001", "10001", "10101", "10101", "10101", "10101", "11111" }, { "10001", "00000", "01010", "00000", "00100", "00000", "01010", "00000", "10001" }, { "10001", "10001", "10001", "10001", "11111", "00001", "00001", "00001", "11111" }, { "11111", "00000", "00010", "00000", "00100", "00000", "01000", "00000", "11111" }}; 
    char currentChar = 'A';
    for (auto &pattern : patterns) { 
        mp[pattern] = currentChar++; 
    } 

    vector<string> matrix;
    int size = 0;
    for(int i=0; i<9; i++) {
        string s;
        cin >> s;
        size = s.size();
        matrix.push_back(s);
    }

    int low = 0;
    int high = 4;
    string ans = "";
    vector<string> temp = findMat(low, high, matrix);
    while(high < size) {
        if(mp.count(temp)) {
            ans.push_back(mp[temp]);
            low = high + 1;
            high += 5;
            while(high < size && allZeros(low, matrix)) {
                low++;
                high++;
            }
            if(high < size) temp = findMat(low, high, matrix);
        }
        else {
            low++;
            high++;
            if(high < size) temp = findMat(low, high, matrix);
        }
    }

    cout << ans;
    return 0;
}